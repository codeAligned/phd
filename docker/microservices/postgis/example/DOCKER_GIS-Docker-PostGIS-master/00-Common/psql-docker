#!/bin/bash

# Launches a Docker psql in interactive mode

# Usage text

usage()
{
cat << EOF
usage: $0 [options] host port user dbname

Launches a Docker psql in interactive mode.
Must be run as superuser with environment:

   sudo -E psql-docker

The script mounts the working folder as output folder for the container, mapping
the current folder user to the container's postgres user.

ARGUMENTS:
   host                       Host to connect to. Defaults to "postgis".
   port                       Port to connect to. Defaults to "5432".
   user                       User to connect with. Defaults to "postgres".
   dbname                     DB to connect to. Defaults to "postgres".

OPTIONS:
   -h                         This help.
   -n [name]                  A name. If a container with the same name is present,
                              it will restart it. If not, it will be created.
                              If not present, an interactive, --rm container
                              will be created.
   -t [version tag]           Launches a certain PostGIS version tag.
                              If not present, 'latest' will be issued.
   -v [folder]:[name]         Mounts local folders. Multiple volumes can be issued.
                              /home/$USER:/home is mounted by default.
   -l [container name]:[id]   Links to that container assigning the given ID to it.
                              Multiple links can be issued. If a single container is given
                              and no ID is specified, "postgis" will be assumed as ID. Volumes
                              are linked too.
   -p [folder]                A folder inside the container whose user ID must be mapped to
                              the postgres user. Defaults to the /output/ folder.

   -u uid:gid                 Assign the given UID and GID to the postgres user. In Mac is not an
                              issue, but in Linux it's critical.

USAGE PATTERNS:

Most common usage case is:

    sudo -E psql-docker -l PG-Container-To-Work-On

    sudo -E psql-docker a.server.es 5434 theUser theDb

The first one links to a PostGIS container and opens a psql session on it. The second
connects to an instance running on a server host.
EOF
}


# Variables

NAME=
VERSION=
LINKS=()
VOLUMES=()
FOLDER="/output/"


# Command line parsing

POS=0

while getopts ":hn:t:l:v:p:u:" OPTION
do
  case $OPTION in
  	h)
  	    usage
  	    exit 1
  	    ;;
  	n)
  	    NAME=$OPTARG
  	    POS=$((POS+2))
  	    ;;
  	t)
  	    VERSION=$OPTARG
  	    POS=$((POS+2))
  	    ;;
  	v)
  	    VOLUMES+=("$OPTARG")
  	    POS=$((POS+2))
  	    ;;
  	l)
  	    LINKS+=("$OPTARG")
  	    POS=$((POS+2))
  	    ;;
  	p)
  	    FOLDER=$OPTARG
  	    POS=$((POS+2))
  	    ;;
    u)  UGID=$OPTARG
        POS=$((POS+2))
        ;;
  	?)
  	usage
  	exit
  	;;
  esac
done


# Parse arguments

shift $POS

HOST=$1
PORT=$2
USER=$3
DB=$4

if [[ $HOST == "" ]] ; then
  HOST="postgis"
fi

if [[ $PORT == "" ]] ; then
  PORT="5432"
fi

if [[ $USER == "" ]] ; then
  USER="postgres"
fi

if [[ $DB == "" ]] ; then
  DB="postgres"
fi


# Check for empty version

if [ -z "$VERSION" ] ; then
  VERSION="latest"
fi


# Command parsing

C="docker "


# Check for empty name for issuing an --rm -ti container

if [ -z "$NAME" ] ; then
  C+="run --rm -ti "
else
  # Check for existing container
  DOCKERID=`docker ps -a -q -f name=${NAME}`

  if [ $DOCKERID ] ; then
    C+="start ${NAME} "
	  eval $C
    exit 0
  else
    C+="run -ti --name ${NAME} "
  fi
fi


# Volumes

if [ "${#VOLUMES[@]}" -gt "0" ] ; then
  for ((i=0;i<=((${#VOLUMES[@]}-1));i++))
  do
    C+="-v ${VOLUMES[i]} "
  done;
fi


# Add the current folder as output

C+="-v $(pwd):/output/ "


# Links

if [ "${#LINKS[@]}" -gt "0" ] ; then
  for ((i=0;i<=((${#LINKS[@]}-1));i++))
  do
    # Only the container name is needed to link volumes, strip the alias
	  IFS=':'; CONNAME=($LINKS[i]); unset IFS;

	  if ! [[ ${LINKS[i]} == *":"* ]] ; then
      C+="--link ${LINKS[i]}:postgis --volumes-from ${LINKS[i]} "
    else
      C+="--link ${LINKS[i]} --volumes-from ${LINKS[i]} "
    fi
  done;
fi


# User UID and GID

if [ -z "$UGID" ] ; then
  IFS=':' ; R=($UGID)
  C+="-e \"CUID=${R[0]}\" -e \"CGID=${R[1]}\" "
  unset IFS
fi


# Check if Darwin is the OS, if not, consider UID_FOLDER
if ! [ "$(uname -s)" == "Darwin" ]; then
  C+="-e \"UID_FOLDER=${FOLDER}\" "
fi

C+="-e LANG=C.UTF-8 geographica/postgis:${VERSION} "
C+="su postgres -c \"psql -h ${HOST} -p ${PORT} -U ${USER} ${DB}\""


# Launch

eval $C
